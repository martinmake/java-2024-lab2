h1. Отчёт по 2 лабораторной работе (Михалец Мартин)

*Михалец Мартин, гр. 5130201/20102*

h2. Постановка задачи

1. Исследовать класс Queue, посмотреть абстрактные классы и интерфейсы, которые данный тип реализует.
2. Реализовать интерфейс Queue, добавить параметры типа, реализовать интерфейс Iterable<T>.  Написать тесты, которые демонстрируют аналогичное поведение коллекции Queue и реализованной нами.

h2. Queue

Класс Queue - это интерфейс, определяющий структуру данных "очередь" (FIFO — First-In, First-Out, "первый зашел, первый вышел"). Он расположен в пакете java.util и является частью Java Collections Framework.

h3. Особенности:

* *FIFO (First-In, First-Out)* – Очередь работает по принципу «первым пришел — первым ушел».
* *Динамическая структура данных* – Может расширяться или сжиматься в зависимости от добавления или удаления элементов.
* *Доступ только к краям очереди* – Элементы добавляются в конец (rear) и удаляются из начала (front).
* *Итератор* – Предоставляется для последовательного перебора элементов очереди.

h3. Преимущества:

* *Простота использования* – Очередь интуитивно понятна и подходит для многих алгоритмов.
* *Эффективность операций* – Операции добавления и удаления имеют сложность O(1) для связных списков.
* *Универсальность* – Поддерживает множество операций для работы с коллекциями.
* *Поддержка итераторов* – Позволяет перебирать элементы с помощью итераторов.

h3. Недостатки:

* *Неоптимально для поиска* – Поиск элемента требует O(n) времени.

h2. Реализация интерфейса Queue<T> и Iterable<T>

Он содержит следующие поля:
* @private Node<T> front@ – Указатель на первый (головной) элемент очереди. Элемент, который будет удален при следующем вызове @poll()@ или @remove()@.
* @private Node<T> rear@ – Указатель на последний (хвостовой) элемент очереди. Элемент, к которому будет добавлен новый элемент при вызове @add()@ или @offer()@.
* @private int size@ – Текущее количество элементов в очереди.

А также следующие методы:
* @public boolean add(T elem)@ – Добавляет элемент @elem@ в конец очереди. Бросает исключение @IllegalStateException@, если превышена емкость очереди (если очередь ограничена).
* @public T element()@ – Возвращает (но не удаляет) элемент из начала очереди. Бросает исключение @NoSuchElementException@, если очередь пуста.
* @public boolean offer(T data)@ – Добавляет элемент @data@ в конец очереди. В отличие от @add()@, возвращает @false@, если добавить элемент невозможно из-за ограничений емкости очереди.
* @public T peek()@ – Возвращает (но не удаляет) элемент из начала очереди или @null@, если очередь пуста.
* @public T poll()@ – Возвращает и удаляет элемент из начала очереди. Возвращает @null@, если очередь пуста.
* @public T remove()@ – Удаляет и возвращает элемент из начала очереди. Бросает @NoSuchElementException@, если очередь пуста.
* @public boolean addAll(Collection<? extends T> c)@ – Добавляет все элементы из коллекции @c@ в очередь. Возвращает @true@, если очередь была изменена в результате вызова.
* @public void clear()@ – Удаляет все элементы из очереди.
* @public boolean contains(Object o)@ – Возвращает @true@, если элемент @o@ присутствует в очереди, иначе @false@.
* @public boolean containsAll(Collection<?> c)@ – Возвращает @true@, если очередь содержит все элементы коллекции @c@.
* @public boolean equals(Object obj)@ – Сравнивает текущую очередь с объектом @obj@ на равенство. Очереди считаются равными, если они содержат одни и те же элементы в одинаковом порядке.
* @public boolean isEmpty()@ – Возвращает @true@, если очередь пуста, иначе @false@.
* @public Iterator<T> iterator()@ – Возвращает итератор для перебора элементов очереди в порядке от начала к концу.
* @public boolean remove(Object o)@ – Удаляет первое вхождение элемента @o@ из очереди (если он присутствует). Возвращает @true@, если элемент был удален.
* @public boolean removeAll(Collection<?> c)@ – Удаляет из очереди все элементы, присутствующие в коллекции @c@. Возвращает @true@, если очередь изменилась в результате вызова.
* @public boolean retainAll(Collection<?> c)@ – Удаляет все элементы из очереди, кроме тех, которые содержатся в коллекции @c@. Возвращает @true@, если очередь изменилась.
* @public int size()@ – Возвращает количество элементов в очереди.
* @public Object[] toArray()@ – Возвращает массив, содержащий все элементы очереди в правильном порядке.
* @public <E> E[] toArray(E[] a)@ – Возвращает массив типа @E@, содержащий все элементы очереди. Если размер переданного массива @a@ меньше, создается новый массив требуемого типа.

h2. Тестирование

Для проверки корректности реализованных методов, под каждую из них был реализован unit тест с использованием библиотеки JUnit4.  Все тесты были размещены в класс тестов @MyQueueTest@.  Он обладает следующими полями, которые обновляются перед вызовом каждого теста новыми экземплярами коллекций при помощи метода @setup@, аннотированного @Before@:
* @Queue<Integer> baseQueue@ - список, из стандартной коллекции.
* @MyQueue<Integer> myQueue@ - список, реализованный студентом.
Каждый тест выполняет одинаковые действия для каждой из коллекций и в конце проверяет их на эквивалентность.

h2. Выводы

В данной лабораторной работе был исследован интерфейс @Queue@ из Java Collections, изучены его особенности и был реализован собственный класс @MyQueue@, реализующий данный интерфейс.  Также при помощи тестов была проверена корректность работы реализованной коллекции.

h2. Исходный код

Ссылка на репозиторий: https://github.com/martinmake/java-2024-lab2
